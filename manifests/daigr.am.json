{
  "schema_version": "v1",
  "name_for_human": "daigr.am",
  "name_for_model": "daigram",
  "description_for_human": "Build great looking charts and graphs.",
  "description_for_model": "Plugin for visualizing data with charts and graphs. This plugin has one endpoint called \"create\" which takes a chart specification and returns the URL to an SVG file that can be opened by any program that supports the SVG version 1.1 format, including drawing programs, presentation software, and web browsers where they can be displayed as a static IMG or opened natively in the browser for full interactivity. \n\nThe chart specification comprises three parts:\n\n1: version (always \"1.0\")\n2: model (the raw data and description of the data structure)\n3: view (visual characteristics of the requested chart)\n\nModel data is structured as nested arrays of numbers. Every dimension of the data array MUST be described in the model \"nestingLevels\" property. Every element (array or number) at dimension N of the data array MUST have a corresponding label in the Nth \"nestingLevels\" \"labels\" property. Note that the order in which nestingLevels are listed is important. The first nesting level refers to the outermost level of the nested data array, and each subsequent nesting level refers to the next innermost level of the nested data array. Here are two example chart specifications that yield the same static image, but can differ in the interactivity that they offer. The first only provides the minimum data necessary to render a pie chart so interactive filters cannot be shown, while the second provides enough data to show the same pie chart initially, but also lets the user filter by Year to show a subset of the data corresponding to the unfiltered Years data aggregated as specified.\n\nMinimum data example:\n\n{\"version\":\"1.0\",\"model\":{\"data\":[10,20,50,20],\"nestingLevels\":[{\"name\":\"Departments\",\"labels\":[\"Sales\",\"HR\",\"Engineering\",\"Admin\"]}]},\"view\":{\"type\":\"Pie Chart\",\"title\":\"Budget % by Department\"}}\n\nFull data example:\n\n{\"version\":\"1.0\",\"model\":{\"data\":[[9,11],[21,19],[51,49],[19,21]],\"nestingLevels\":[{\"name\":\"Departments\",\"labels\":[\"Sales\",\"HR\",\"Engineering\",\"Admin\"]},{\"name\":\"Years\",\"labels\":[\"2019\",\"2020\"],\"aggregator\":\"mean\"}]},\"view\":{\"type\":\"Pie Chart\",\"title\":\"Budget % by Department\"}}\n\nIn the full data example, the 1st nesting level is called \"Departments\", and indicates that the outermost nesting level of data contains 4 elements of data each representing 1 of the 4 Departments. The next nesting level is called \"Years\", and indicates that the 2nd outermost nesting level of data contains 2 elements of data each representing 1 of the 2 Years. Since the requested chart type only displays a single level of data, the second level is aggregated using the specified aggregator, or \"sum\" if no aggregator is listed. Pie Charts and Donut Charts can display at most one nested level of data and will aggregate deeper levels to meet this requirement. Bar Charts and Line Charts can display one or two nesting levels of data and will aggregate deeper levels to meet this requirement. Here's an example of a multi line chart:\n\nLine chart with two lines:\n{\"version\":\"1.0\",\"model\":{\"data\":[[11,0,12,-4],[-5,6,1,2],[3,-4,6,-7]],\"nestingLevels\":[{\"name\":\"Employees\",\"labels\":[\"James Walker\",\"Barb Jones\",\"Pat Smith\"]},{\"name\":\"Quarters\",\"labels\":[\"1st Quarter\",\"2nd Quarter\",\"3rd Quarter\"]}]},\"view\":{\"title\":\"Bonus Points by Employee and Quarter for 2022\",\"type\":\"Line Chart\"}}\n\nThis previous example will display multiple lines, one for each employee across four quarters. The same model can be use for a grouped series bar chart with each Employee representing a series and each Quarter representing a grouping of series-colored bars.",
  "auth": {
    "type": "none"
  },
  "api": {
    "type": "openapi",
    "url": "https://daigr.am/openapi.json",
    "is_user_authenticated": false
  },
  "logo_url": "https://daigr.am/logo.png",
  "contact_email": "daigram@waldin.net",
  "legal_info_url": "http://daigr.am/legal.txt"
}